# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import safeEntry_pb2 as safeEntry__pb2


class SafeEntryStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckIn = channel.unary_unary(
                '/safeEntry.SafeEntry/CheckIn',
                request_serializer=safeEntry__pb2.Request.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.CheckOut = channel.unary_unary(
                '/safeEntry.SafeEntry/CheckOut',
                request_serializer=safeEntry__pb2.Request.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.GroupCheckIn = channel.stream_unary(
                '/safeEntry.SafeEntry/GroupCheckIn',
                request_serializer=safeEntry__pb2.Request.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.GroupCheckOut = channel.unary_unary(
                '/safeEntry.SafeEntry/GroupCheckOut',
                request_serializer=safeEntry__pb2.Request.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.HistoryListing = channel.unary_stream(
                '/safeEntry.SafeEntry/HistoryListing',
                request_serializer=safeEntry__pb2.Request.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.ListCases = channel.stream_stream(
                '/safeEntry.SafeEntry/ListCases',
                request_serializer=safeEntry__pb2.Reply.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.DeclareAffected = channel.unary_unary(
                '/safeEntry.SafeEntry/DeclareAffected',
                request_serializer=safeEntry__pb2.Reply.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.GetNotified = channel.unary_unary(
                '/safeEntry.SafeEntry/GetNotified',
                request_serializer=safeEntry__pb2.Reply.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )
        self.LogInNotification = channel.unary_stream(
                '/safeEntry.SafeEntry/LogInNotification',
                request_serializer=safeEntry__pb2.Reply.SerializeToString,
                response_deserializer=safeEntry__pb2.Reply.FromString,
                )


class SafeEntryServicer(object):
    """The greeting service definition.
    """

    def CheckIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupCheckIn(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupCheckOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HistoryListing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCases(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeclareAffected(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNotified(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogInNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SafeEntryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckIn': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckIn,
                    request_deserializer=safeEntry__pb2.Request.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'CheckOut': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckOut,
                    request_deserializer=safeEntry__pb2.Request.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'GroupCheckIn': grpc.stream_unary_rpc_method_handler(
                    servicer.GroupCheckIn,
                    request_deserializer=safeEntry__pb2.Request.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'GroupCheckOut': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupCheckOut,
                    request_deserializer=safeEntry__pb2.Request.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'HistoryListing': grpc.unary_stream_rpc_method_handler(
                    servicer.HistoryListing,
                    request_deserializer=safeEntry__pb2.Request.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'ListCases': grpc.stream_stream_rpc_method_handler(
                    servicer.ListCases,
                    request_deserializer=safeEntry__pb2.Reply.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'DeclareAffected': grpc.unary_unary_rpc_method_handler(
                    servicer.DeclareAffected,
                    request_deserializer=safeEntry__pb2.Reply.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'GetNotified': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNotified,
                    request_deserializer=safeEntry__pb2.Reply.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
            'LogInNotification': grpc.unary_stream_rpc_method_handler(
                    servicer.LogInNotification,
                    request_deserializer=safeEntry__pb2.Reply.FromString,
                    response_serializer=safeEntry__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'safeEntry.SafeEntry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SafeEntry(object):
    """The greeting service definition.
    """

    @staticmethod
    def CheckIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safeEntry.SafeEntry/CheckIn',
            safeEntry__pb2.Request.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safeEntry.SafeEntry/CheckOut',
            safeEntry__pb2.Request.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupCheckIn(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/safeEntry.SafeEntry/GroupCheckIn',
            safeEntry__pb2.Request.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupCheckOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safeEntry.SafeEntry/GroupCheckOut',
            safeEntry__pb2.Request.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HistoryListing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/safeEntry.SafeEntry/HistoryListing',
            safeEntry__pb2.Request.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCases(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/safeEntry.SafeEntry/ListCases',
            safeEntry__pb2.Reply.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeclareAffected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safeEntry.SafeEntry/DeclareAffected',
            safeEntry__pb2.Reply.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNotified(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safeEntry.SafeEntry/GetNotified',
            safeEntry__pb2.Reply.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogInNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/safeEntry.SafeEntry/LogInNotification',
            safeEntry__pb2.Reply.SerializeToString,
            safeEntry__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
